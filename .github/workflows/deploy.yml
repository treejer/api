name: Deploy API to GCR
on:
  push:
    branches:
      - gcpize  
      - dev
      - main

env:
  PROJECT_ID: ${{ secrets.GCR_PROJECT }}
  RUN_REGION: ${{ secrets.GCR_REGION }}
  SERVICE_NAME: apidev
  SERVICE_NAME_LISTENER: apidev-listener
jobs:
  deploy-gcr:
    name: Deploy to GCR - DEV
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@main

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCR_SA_KEY }}'
          project_id: '${{ secrets.GCR_PROJECT }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: create env file
        run: |
            echo '${{ secrets.ALL_ENV }}' > .env

      - name: 'Docker build'
        run: 'docker build -t gcr.io/$PROJECT_ID/${{ env.SERVICE_NAME }}:$GITHUB_SHA -f ./.docker/prod.Dockerfile .'

      - name: 'Gcloud auth configure-docker'
        run: 'gcloud auth configure-docker'

      - name: 'Docker push to GCR'
        run: 'docker push gcr.io/$PROJECT_ID/${{ env.SERVICE_NAME }}:$GITHUB_SHA'

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.RUN_REGION }}
          image: 'gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}'

      - name: Deploy listener job to Cloud Run
        id: deploy-listener
        run: |
          command_to_run="gcloud run jobs list"
          search_string="${{ env.SERVICE_NAME_LISTENER }}"
          response=$(eval "$command_to_run")
          delete_job_command="gcloud run jobs delete ${{ env.SERVICE_NAME_LISTENER }} --region ${{ env.RUN_REGION }}"
          create_job_command="gcloud run jobs create ${{ env.SERVICE_NAME_LISTENER }} --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} --region ${{ env.RUN_REGION }} --tasks 1 --max-retries 10 --task-timeout 24h --parallelism 0 --args node,dist/cli,listener:run --cpu 1 --memory 2G"
          execute_job_command="gcloud run jobs execute ${{ env.SERVICE_NAME_LISTENER }} --region ${{ env.RUN_REGION }}"
          if [[ $response =~ $search_string ]]; then
              echo "Job exists."

              command_to_run_latest_name="gcloud run jobs describe ${{ env.SERVICE_NAME_LISTENER }} --format='value(status.latestCreatedExecution.name)' --region ${{ env.RUN_REGION }}"
              latest_execution=$(eval "$command_to_run_latest_name")
              gcloud run jobs executions delete $latest_execution --region ${{ env.RUN_REGION }}
              
              $delete_job_command
              
              $create_job_command
              $execute_job_command
          else
              echo "Job does not exist."
              $create_job_command
              $execute_job_command
          fi
        