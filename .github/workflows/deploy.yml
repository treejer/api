name: Deploy API to GCR
on:
  push:
    branches:
      - gcpize  
      - dev
      - main

env:
  PROJECT_ID: ${{ secrets.GCR_PROJECT }}
  RUN_REGION: ${{ secrets.GCR_REGION }}
  SERVICE_NAME: apidev
jobs:
  deploy-gcr:
    name: Deploy to GCR - DEV
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: 'Debugging variables'
        run: |
          echo "SERVICE_NAME: ${{ env.SERVICE_NAME }}"
          echo "GITHUB_SHA: $GITHUB_SHA"

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCR_SA_KEY }}'
          project_id: '${{ secrets.GCR_PROJECT }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: create env file
        run: |
              touch .env
              echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env
              cat .env
              echo MONGO_TEST_CONNECTION=${{ secrets.MONGO_TEST_CONNECTION }} >> .env
              echo MONGO_CONNECTION=${{ secrets.MONGO_CONNECTION }} >> .env
              echo VERIFYING_CONTRACT=${{ secrets.VERIFYING_CONTRACT }} >> .env
              echo CHAIN_ID=${{ secrets.CHAIN_ID }} >> .env
              echo TREE_UPDATE_INTERVAL=${{ secrets.TREE_UPDATE_INTERVAL }} >> .env
              echo INFURA_PROJECT_ID=${{ secrets.INFURA_PROJECT_ID }} >> .env
              echo EIP712_DOMAIN_NAME=${{ secrets.EIP712_DOMAIN_NAME }} >> .env
              echo EIP712_VERSION=${{ secrets.EIP712_VERSION }} >> .env
              echo WEB3_PROVIDER=${{ secrets.WEB3_PROVIDER }} >> .env
              echo WEB3_PROVIDER_TEST=${{ secrets.WEB3_PROVIDER_TEST }} >> .env
              echo WEB3S_PROVIDER_TEST=${{ secrets.WEB3S_PROVIDER_TEST }} >> .env
              echo WEB3S_PROVIDER=${{ secrets.WEB3S_PROVIDER }} >> .env
              echo PORT=${{ secrets.PORT }} >> .env
              echo APP_NAME=${{ secrets.APP_NAME }} >> .env
              echo APP_ENV=${{ secrets.APP_ENV }} >> .env
              echo APP_KEY=${{ secrets.APP_KEY }} >> .env
              echo APP_DEBUG=${{ secrets.APP_DEBUG }} >> .env
              echo APP_URL=${{ secrets.APP_URL }} >> .env
              echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
              echo TWILIO_SID=${{ secrets.TWILIO_SID }} >> .env
              echo TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }} >> .env
              echo TWILIO_FROM=${{ secrets.TWILIO_FROM }} >> .env
              echo NONCE_SIGNING_BOUND=${{ secrets.NONCE_SIGNING_BOUND }} >> .env
              echo SMS_RESEND_BOUND=${{ secrets.SMS_RESEND_BOUND }} >> .env
              echo SMS_VERIFY_BOUND=${{ secrets.SMS_VERIFY_BOUND }} >> .env
              echo SMS_RATE_LIMIT_PER_DAY=${{ secrets.SMS_RATE_LIMIT_PER_DAY }} >> .env
              echo LOGIN_TOKEN_EXPIRATION_BOUND=${{ secrets.LOGIN_TOKEN_EXPIRATION_BOUND }} >> .env
              echo PASSWORD_RESET_TOKEN_VALID_UNTIL=${{ secrets.PASSWORD_RESET_TOKEN_VALID_UNTIL }} >> .env
              echo MAIL_MAILER=${{ secrets.MAIL_MAILER }} >> .env
              echo MAIL_HOST=${{ secrets.MAIL_HOST }} >> .env
              echo MAIL_PORT=${{ secrets.MAIL_PORT }} >> .env
              echo MAIL_USERNAME=${{ secrets.MAIL_USERNAME }} >> .env
              echo MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} >> .env
              echo MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION }} >> .env
              echo MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }} >> .env
              echo MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }} >> .env
              echo ADMIN_EMAILS=${{ secrets.ADMIN_EMAILS }} >> .env
              echo THE_GRAPH_URL=${{ secrets.THE_GRAPH_URL }} >> .env
              echo THE_GRAPH_URL_TEST=${{ secrets.THE_GRAPH_URL_TEST }} >> .env
              echo TREEJER_WEB_URL=${{ secrets.TREEJER_WEB_URL }} >> .env
              echo ETH_PRICE_API_URL=${{ secrets.ETH_PRICE_API_URL }} >> .env
              echo ETH_PRICE_API_KEY=${{ secrets.ETH_PRICE_API_KEY }} >> .env
              echo ETHER_VALUE_VALID_UNTIL=${{ secrets.ETHER_VALUE_VALID_UNTIL }} >> .env
              echo DEFAULT_IMAGE_URL=${{ secrets.DEFAULT_IMAGE_URL }} >> .env
              echo MAGIC_SECRET_API_KEY1=${{ secrets.MAGIC_SECRET_API_KEY1 }} >> .env
              echo MAGIC_PUBLIC_API_KEY=${{ secrets.MAGIC_PUBLIC_API_KEY }} >> .env
              echo POLL_INTERVAL=${{ secrets.POLL_INTERVAL }} >> .env
              echo CONFIRMATIONS=${{ secrets.CONFIRMATIONS }} >> .env
              echo CHUNK_SIZE=${{ secrets.CHUNK_SIZE }} >> .env
              echo CONCURRENCY=${{ secrets.CONCURRENCY }} >> .env
              echo BACK_OFF=${{ secrets.BACK_OFF }} >> .env
              echo LISTENER_CONTRACT_NAME=${{ secrets.LISTENER_CONTRACT_NAME }} >> .env
              echo LISTENER_CONTRACT_ADDRESS=${{ secrets.LISTENER_CONTRACT_ADDRESS }} >> .env
              echo LISTENER_CONTRACT_EVENTS=${{ secrets.LISTENER_CONTRACT_EVENTS }} >> .env
              echo BUGSNAG_API_KEY=${{ secrets.BUGSNAG_API_KEY }} >> .env
              echo BUGSNAG_ACTIVE=${{ secrets.BUGSNAG_ACTIVE }} >> .env
              echo CONTRACT_PLANTER_ADDRESS=${{ secrets.CONTRACT_PLANTER_ADDRESS }} >> .env
              echo CONTRACT_TREE_FACTORY_ADDRESS=${{ secrets.CONTRACT_TREE_FACTORY_ADDRESS }} >> .env
              echo STORAGE_DIRECTORY=${{ secrets.STORAGE_DIRECTORY }} >> .env


      - name: 'Docker build'
        run: 'docker build -t gcr.io/$PROJECT_ID/${{ env.SERVICE_NAME }}:$GITHUB_SHA -f ./.docker/prod.Dockerfile .'

      - name: 'Gcloud auth configure-docker'
        run: 'gcloud auth configure-docker'

      - name: 'Docker push to GCR'
        run: 'docker push gcr.io/$PROJECT_ID/${{ env.SERVICE_NAME }}:$GITHUB_SHA'

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.RUN_REGION }}
          image: 'gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}'